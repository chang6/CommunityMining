getwd()
setwd('/Users/zhangchi/Desktop/cs690/Project')
library("gplots", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("WGCNA", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
heatmap.2(log2(AM+1), Rowv=FALSE, Colv= FALSE, dendrogram="none", col = (brewer.pal(9,"Blues")),scale="none", trace="none",
labRow=AM.names,labCol=AM.names, colsep=FALSE,
density="none", key.title="", key.xlab="# of emails (log2 scale)" , mar=c(8,8))
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
setwd('/Users/zhangchi/Desktop/cs690/Project')
AM = as.matrix(read.csv("FinalAdjacencyMatrix.csv",sep=",", header=TRUE, row.names=1)) # sent emails
AMlist = read.csv("FinalAdjacencyMatrix.csv",sep=",", header=TRUE, row.names=1) # sent emails as list
# employee information might be interesting to analyze for considering relationships # within the company
# enronemployees = read.table("Enron Employee Information.csv", sep=",", header=T) AMt = t(AM) # received emails
AM2 <- AM + t(AM) - 2*diag(diag(AM)) # sent and received emails
AM.names=c(rep(NA,20), row.names(AM)[21],rep(NA,44), row.names(AM)[66], rep(NA,2), row.names(AM)[69], rep(NA,87))
heatmap.2(log2(AM+1), Rowv=FALSE, Colv= FALSE, dendrogram="none", col = (brewer.pal(9,"Blues")),scale="none", trace="none",
labRow=AM.names,labCol=AM.names, colsep=FALSE,
density="none", key.title="", key.xlab="# of emails (log2 scale)" , mar=c(8,8))
eng <- graph.adjacency(do.call(rbind,AMlist)) engt <- graph.adjacency(do.call(cbind,AMlist))
eigcent <- igraph::evcent(eng, directed=TRUE)
eigcentt <- igraph::evcent(engt, directed=TRUE) # eigenvalue centrality on transpose of graph
dcent <- igraph::degree(eng) bmeas <- igraph::betweenness(eng) cmeas <- igraph::closeness(eng)
# TOM
AM2 <- AM2 / max(AM2)
TOM <- TOMsimilarity(AM2)
library("igraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
eng <- graph.adjacency(do.call(rbind,AMlist)) engt <- graph.adjacency(do.call(cbind,AMlist))
eigcent <- igraph::evcent(eng, directed=TRUE)
eigcentt <- igraph::evcent(engt, directed=TRUE) # eigenvalue centrality on transpose of graph
dcent <- igraph::degree(eng) bmeas <- igraph::betweenness(eng) cmeas <- igraph::closeness(eng)
# TOM
AM2 <- AM2 / max(AM2)
TOM <- TOMsimilarity(AM2)
eng <- graph.adjacency(do.call(rbind,AMlist))
engt <- graph.adjacency(do.call(cbind,AMlist))
eigcent <- igraph::evcent(eng, directed=TRUE)
eigcentt <- igraph::evcent(engt, directed=TRUE) # eigenvalue centrality on transpose of graph
dcent <- igraph::degree(eng)
bmeas <- igraph::betweenness(eng)
cmeas <- igraph::closeness(eng)
AM2 <- AM2 / max(AM2)
TOM <- TOMsimilarity(AM2)
detach("package:WGCNA", unload=TRUE)
library("WGCNA", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("WGCNA")
library("WGCNA", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("Go.db")
biocLite(c("GO.db"))
source("https://bioconductor.org/biocLite.R")
biocLite("GO.db")
library("WGCNA", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:WGCNA", unload=TRUE)
install.packages("WGCNA")
library("WGCNA", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:WGCNA", unload=TRUE)
install.packages("WGCNA")
biocLite("impute")
biocLite("preprocessCore")
library("WGCNA", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:WGCNA", unload=TRUE)
install.packages("WGCNA")
library("WGCNA", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
AM2 <- AM2 / max(AM2)
TOM <- TOMsimilarity(AM2)
library("igraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
help("rbind")
dcent
View(TOM)
Tomrank <- as.matrix(apply(TOM,1,sum)) # grab its row-sums rownames(TOMrank) <- rownames(AM)
colnames(TOMrank) <- "value"
TOMrank <- as.matrix(apply(TOM,1,sum)) # grab its row-sums rownames(TOMrank) <- rownames(AM)
colnames(TOMrank) <- "value"
comptable <- matrix(ncol=6, nrow=dim(AM)[1])
comptable[,1] <- rank(dcent)
comptable[,2] <- rank(eigcent$vector)
comptable[,3] <- rank(eigcentt$vector)
comptable[,4] <- rank(cmeas)
comptable[,5] <- rank(bmeas)
comptable[,6] <- rank(TOMrank)
pairs(comptable[,1:6],pch=20,main="Ranking Metrics Comparison",
labels=c("Degree","EV Cent.", "EV Cent. (T)","Closeness","Betweenness", "TOM"), cex=.5,xlim=c(0,160),ylim=c(0,160),lower.panel=panel.cor)
1	? pairs
1 ? pairs
TOMrank <- as.matrix(apply(TOM,1,sum)) # grab its row-sums
